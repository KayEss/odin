# Set up the modules we need
odin.sql.file (module.path.join ../Schema/core/000-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/core/002-add-merge-account.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/002-fix-login.blue.sql)
odin.sql.file (module.path.join ../Schema/authn/003-alter-ledgers.blue.sql)

setting odin "Facebook API Endpoint" "https://graph.facebook.com/v3.2"
setting odin "Facebook" {
    "main": "111111111111111",
    "allowed": ["111111111111111", "222222222222222"]
}

# For self registration we must be not logged in
GET odin /api/ 401 {"odin": {"login": "./login/"}}

POST odin/register / {"username": "self_register_user", "password": "password1234"} 201
POST odin/login / {"username": "self_register_user", "password": "password1234"} 200


# Register with a username works the first time, but then returns an error
POST odin/register / {"username": "some-user", "password": "password1234"} 201
POST odin/register / {"username": "some-user", "password": "password5678"} 501

# Password should longer than 8 characters
POST odin/register / {"username": "some-user", "password": "pwd"} 501

# Password cannot be empty
POST odin/register / {"username": "some-user", "password": ""} 501

# But for managed registration we must be logged in
odin.user test-user test-user pw1234
odin.jwt.authorization test-user pw1234
GET odin /api/ 200 {"odin": {"user": "./user/:user-id/"}, "user": {"id": "test-user"}}

setting webserver views/odin/register-trim-false {
    "view": "odin.register",
    "configuration": {
        "trim": false
    }
}

# Any leading/trailing whitespace in username will be trimmed
POST odin/register / {"username": "\u0020user\u2008", "password": "password1234"} 201
POST odin/login / {"username": "user", "password": "password1234"} 200

# However, if set "trim" config to false, it won't trim
POST odin/register-trim-false / {"username": "\u0020user2\u2008", "password": "password1234"} 201
POST odin/login / {"username": "\u0020user2\u2008", "password": "password1234"} 200

# Put the user
PUT odin /api/user/test-user {"password": "1234"} 200


## Enable opts/full-name module, then user can register with full-name along with username and password
odin.sql.file (module.path.join ../Schema/opts/full-name/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/full-name/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/full-name/004-merge-account-function.blue.sql)
POST odin/register / {"username": "user88", "password": "password1234", "full_name": "John Doe"} 201
GET odin/secure/sql /user/user88 200 {"user": {"expires": null, "full_name": "John Doe"}, "credentials": {"login": "user88"}}


## Enable opts/email module, then user can register with email
odin.sql.file (module.path.join ../Schema/opts/email/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/email/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/email/004-merge-account-function.blue.sql)
POST odin/register / {"username": "user89", "password": "password1234", "email": "admin@example.com"} 201
GET odin/secure/sql /user/user89 200 {"user": {"expires": null, "full_name": null, "email": "admin@example.com"}, "credentials": {"login": "user89"}}


## Should throw exception when user input invalid email
POST odin/register / {"username": "user91", "password": "password1234", "email": "invalid_email"} 501
POST odin/register / {"username": "user91", "password": "password1234", "email": ""} 501

## Should throw exception when user input existing email
POST odin/register / {"username": "user90", "password": "password1234", "email": "admin@example.com"} 422 {"message": "This email already exists"}

# If user already registered with Odin, return 422 with error message
odin.sql.file (module.path.join ../Schema/opts/google/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/google/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/google/004-merge-account-function.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/google/005-google-credentials-insert.blue.sql)
POST odin/test/google/login/ok / {"access_token": "login_via_gp"} 200
POST odin/register / {"username": "login_via_gp", "password": "password1234", "email": "login_via_gp@example.com"} 422 {"message": "This email already exists"}

odin.sql.file (module.path.join ../Schema/opts/facebook/001-initial.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/facebook/003-alter-ledgers.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/facebook/004-merge-account-function.blue.sql)
odin.sql.file (module.path.join ../Schema/opts/facebook/005-facebook-credentials-insert.blue.sql)
POST odin/test/facebook/login/ok / {"access_token": "login_via_fb"} 200
POST odin/register / {"username": "login_via_fb", "password": "password1234", "email": "login_via_fb@example.com"} 422 {"message": "This email already exists"}

